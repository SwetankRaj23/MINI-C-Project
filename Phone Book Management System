#include <stdio.h> 
#include <stdlib.h> 
#include <string.h>

#define MAX_CONTACTS 100


struct Contact { char name[50];
char address[100]; char phone[15]; char email[50];
};


struct Contact phonebook[MAX_CONTACTS]; int num_contacts = 0;

void add_contact() {
struct Contact new_contact;


printf("Enter name: ");
fgets(new_contact.name, sizeof(new_contact.name), stdin); printf("Enter address: ");
fgets(new_contact.address, sizeof(new_contact.address), stdin); printf("Enter phone number: ");
fgets(new_contact.phone, sizeof(new_contact.phone), stdin);
 
printf("Enter email: ");
fgets(new_contact.email, sizeof(new_contact.email), stdin);


phonebook[num_contacts++] = new_contact; printf("Contact added successfully.\n");
}


void view_contacts() { int i;
printf("Contacts:\n");
for (i = 0; i < num_contacts; i++) {
printf("%d. %s%s%s%s", i+1, phonebook[i].name, phonebook[i].address, phonebook[i].phone, phonebook[i].email);
}
}


void edit_contact() { int index;
printf("Enter index of contact to edit: "); scanf("%d", &index);
getchar(); 


if (index < 1 || index > num_contacts) { printf("Invalid index.\n");
return;
}


struct Contact *contact = &phonebook[index-1];


printf("Enter new name: ");
fgets(contact->name, sizeof(contact->name), stdin);
 
printf("Enter new address: ");
fgets(contact->address, sizeof(contact->address), stdin); printf("Enter new phone number: ");
fgets(contact->phone, sizeof(contact->phone), stdin); printf("Enter new email: ");
fgets(contact->email, sizeof(contact->email), stdin);


printf("Contact updated successfully.\n");

}


void search_contact() { int i;
char search_term[50];
printf("Enter search term: ");
fgets(search_term, sizeof(search_term), stdin);


printf("Search results:\n");
for (i = 0; i < num_contacts; i++) {
if (strstr(phonebook[i].name, search_term) != NULL || strstr(phonebook[i].address, search_term) != NULL || strstr(phonebook[i].phone, search_term) != NULL || strstr(phonebook[i].email, search_term) != NULL) {
printf("%d. %s%s%s%s", i+1, phonebook[i].name, phonebook[i].address, phonebook[i].phone, phonebook[i].email);
}
}
}


void delete_contact() { int index,i;
printf("Enter index of contact to delete: ");
 
scanf("%d", &index);
getchar(); 


if (index < 1 || index > num_contacts) { printf("Invalid index.\n");
return;
}


for (i = index-1; i < num_contacts-1; i++) { phonebook[i] = phonebook[i+1];
}
num_contacts--;


printf("Contact deleted successfully.\n");

}


int main() {
int choice;


while (1) {
printf("\nPhonebook Management System\n"); printf("1. Add Contact\n");
printf("2. View All Contacts\n"); printf("3. Edit Contact\n");
printf("4. Search for Contact\n"); printf("5. Delete Contact\n");
printf("6. Quit\n");
printf("Enter your choice: ");


scanf("%d", &choice); getchar();
 

switch (choice) { case 1:
add_contact(); break;
case 2:
view_contacts(); break;
case 3:
edit_contact(); break;
case 4:
search_contact(); break;
case 5:
delete_contact(); break;
case 6:
printf("Goodbye!\n"); exit(0);
default:
printf("Invalid choice.\n");
}

}
return 0;
}
